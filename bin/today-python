#!/usr/bin/env python3
import os
import sys
import datetime
from argparse import ArgumentParser

from methinks.db import Entry
from methinks.api import MethinksAPI
from methinks.parse import parse_sections
from methinks.section import PersistentSection
from methinks.section import VolatileSection
from methinks.section import TodosSection


if __name__ == "__main__":
    parser = ArgumentParser(description="today.py script")
    parser.add_argument("--infile", type=str, help="The file to process")
    args = parser.parse_args()

    api = MethinksAPI(os.environ['METHINKS_HOST'])
    try:
        # Fetch latest entry from remote
        remote_entry = api.get_latest()
    except Exception as e:
        print('ERROR: Methinks remote get_latest not working',
              file=sys.stderr)
        remote_entry = None

    local_entry = Entry.from_file(args.infile)

    # If the remote version has been modified more recently
    # fetch the remote entry
    if remote_entry:
        if remote_entry.last_edited > local_entry.last_edited:
            local_entry = remote_entry

    # If the date we are processing is different, we need to process the input
    if local_entry.date != datetime.date.today():

        triggers = {'Todos': TodosSection,
                    'Notes': PersistentSection,
                    'Conclusions': VolatileSection,
                    'Resources': VolatileSection,
                    'Papers': VolatileSection,
                    'Quotes': VolatileSection}

        sections = parse_sections(local_entry.text, triggers)
        new_text = ''.join(sections)

        # Update local_entry
        local_entry.text = new_text
        local_entry.date = datetime.date.today()

    # If this entry already exists on remote - update it - else create it
    if remote_entry and remote_entry.date == local_entry.date:
        # If there have been any changes
        if remote_entry.hash != local_entry.hash:
            try:
                response = api.update_entry(local_entry)
            except Exception as e:
                response = None
                remote_entry = None
            if response is not None:
                local_entry = response
            else:
                print('ERROR: Methinks remote update not working',
                      file=sys.stderr)
    else:
        try:
            response = api.create_entry(local_entry)
        except Exception as e:
            response = None
            remote_entry = None
        if response is not None:
            local_entry = response
        else:
            print('ERROR: Methinks remote create not working',
                  file=sys.stderr)

    print(local_entry.text, end='')
