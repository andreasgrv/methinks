#!/usr/bin/env python
import re
import os
from argparse import ArgumentParser

from methinks.section import PersistentSection
from methinks.section import VolatileSection
from methinks.section import TodosSection


# Match sections from a methinks entry
# A title is any markdown style header
# Content is any text included on the next line after header
# Until you meet next header or end of file (\Z)
# (?P<name>...) Captures content in parentheses as attr name
# (?=...) Is a lookahead that checks content but doesn't consume input
RE_SPLIT_SECTIONS = r'(?P<section>^#+(?P<title>.*?)\n(?P<content>.*?))(?=^#|\Z)'


if __name__ == "__main__":
    parser = ArgumentParser(description="today.py script")
    parser.add_argument("--infile", type=str, help="The file to process")
    args = parser.parse_args()

    with open(args.infile, 'r') as f:
        data = f.read()

    reg = re.compile(RE_SPLIT_SECTIONS, re.MULTILINE | re.DOTALL)

    triggers = {'Todos': TodosSection,
                'Notes': PersistentSection,
                'Conclusions': VolatileSection,
                'Resources': VolatileSection,
                'Papers': VolatileSection,
                'Quotes': VolatileSection}

    sections = []
    for match in reg.finditer(data):
        section, title = match['section'], match['title']
        title = title.strip()
        sec = triggers[title].from_text(section)
        sections.append(sec.propagate())
    print(''.join(sections), end='')
